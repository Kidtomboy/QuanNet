import sys
import subprocess
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLabel, QScrollArea,
    QGroupBox, QCheckBox, QPushButton, QMessageBox, QHBoxLayout,
    QFrame, QSizePolicy
)
from PyQt6.QtGui import QFont, QColor, QPalette, QIcon
from PyQt6.QtCore import Qt, QPropertyAnimation, QEasingCurve, QSize

# D·ªØ li·ªáu app
apps = {
    "üåê Tr√¨nh duy·ªát": {
        "Brave": "winget install -e --id=Brave.Brave",
        "Google Chrome": "winget install -e --id=Google.Chrome",
        "Microsoft Edge": "winget install -e --id=Microsoft.Edge",
        "Mozilla Firefox": "winget install -e --id=Mozilla.Firefox",
        "Opera & Opera GX": "winget install -e --id=Opera.Opera && start https://www.operagx.com/",
        "Tor Browser": "start https://www.torproject.org/download/",
        "Yandex Browser": "start https://browser.yandex.com/"
    },
    "üõ°Ô∏è VPN & B·∫£o m·∫≠t": {
        "ExpressVPN": "start https://www.expressvpn.com/vpn-download",
        "HideMyAss (HMA)": "start https://www.hidemyass.com/downloads",
        "Hotspot Shield": "start https://www.hotspotshield.com/vi/vpn/vpn-for-windows/",
        "NordVPN": "start https://nordvpn.com/download/",
        "OpenVPN": "start https://openvpn.net/community-downloads/",
        "ProtonVPN": "start https://protonvpn.com/download",
        "UrbanVPN": "start https://www.urban-vpn.com/"
    },
    "üñ•Ô∏è Ph·∫ßn m·ªÅm vƒÉn ph√≤ng": {
        "Adobe Acrobat Reader": "winget install -e --id=Adobe.Acrobat.Reader.64-bit",
        "Adobe Photoshop": "winget install -e --id=Adobe.Photoshop.2021",
        "Microsoft Office": "winget install -e --id=Microsoft.Office",
        "WPS Office": "winget install -e --id=Kingsoft.WPSOffice",
        "LibreOffice": "winget install -e --id=TheDocumentFoundation.LibreOffice"
    }
}

# M√†u ch·ªß ƒë·∫°o
COLOR_PRIMARY = "#4A90E2"
COLOR_PRIMARY_DARK = "#357ABD"
COLOR_BG = "#F5F7FA"
COLOR_CARD = "#FFFFFF"
COLOR_TEXT = "#2E3440"
COLOR_ACCENT = "#D81159"

class HoverCheckBox(QCheckBox):
    def __init__(self, text):
        super().__init__(text)
        self.setCursor(Qt.CursorShape.PointingHandCursor)
        self.setStyleSheet("""
            QCheckBox {
                spacing: 10px;
                font-size: 16px;
                color: """ + COLOR_TEXT + """;
            }
            QCheckBox::indicator {
                width: 22px;
                height: 22px;
            }
            QCheckBox::indicator:unchecked {
                border: 2px solid """ + COLOR_PRIMARY + """;
                background-color: transparent;
                border-radius: 5px;
            }
            QCheckBox::indicator:checked {
                background-color: """ + COLOR_PRIMARY + """;
                border: 2px solid """ + COLOR_PRIMARY + """;
                border-radius: 5px;
            }
            QCheckBox:hover {
                color: """ + COLOR_PRIMARY_DARK + """;
            }
        """)

class FancyButton(QPushButton):
    def __init__(self, text, color=COLOR_PRIMARY):
        super().__init__(text)
        self.color = color
        self.setCursor(Qt.CursorShape.PointingHandCursor)
        self.setFixedHeight(50)
        self.setStyleSheet(f"""
            QPushButton {{
                background-color: {color};
                color: white;
                font-weight: bold;
                font-size: 18px;
                border-radius: 12px;
                padding: 10px 20px;
                transition: background-color 0.3s ease;
            }}
            QPushButton:hover {{
                background-color: {COLOR_PRIMARY_DARK};
            }}
            QPushButton:pressed {{
                background-color: {COLOR_ACCENT};
            }}
        """)

class GroupBoxFancy(QGroupBox):
    def __init__(self, title):
        super().__init__(title)
        self.setFont(QFont("Segoe UI", 14, QFont.Weight.Bold))
        self.setStyleSheet(f"""
            QGroupBox {{
                background-color: {COLOR_CARD};
                border-radius: 15px;
                border: 1.5px solid {COLOR_PRIMARY};
                margin-top: 20px;
                padding: 15px;
                color: {COLOR_PRIMARY_DARK};
            }}
            QGroupBox:title {{
                subcontrol-origin: margin;
                subcontrol-position: top center;
                padding: 0 10px;
                background-color: {COLOR_BG};
            }}
        """)

class InstallerGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("‚ú® Tr√¨nh C√†i App Si√™u X·ªãn X√≤ by Cherry ‚ú®")
        self.setGeometry(150, 50, 720, 820)
        self.setMinimumSize(720, 800)
        self.checkboxes = {}
        self.setup_ui()
        self.setStyleSheet(f"background-color: {COLOR_BG}; color: {COLOR_TEXT};")

    def setup_ui(self):
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(30, 30, 30, 30)
        main_layout.setSpacing(20)

        # Ti√™u ƒë·ªÅ ch√≠nh
        title = QLabel("üåü TR√åNH C√ÄI APP T·ª∞ ƒê·ªòNG BY CHERRY üåü")
        title.setFont(QFont("Segoe UI", 26, QFont.Weight.Bold))
        title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        title.setStyleSheet(f"color: {COLOR_PRIMARY};")
        main_layout.addWidget(title)

        # Gi·ªõi thi·ªáu ng·∫Øn
        desc = QLabel("Ch·ªçn c√°c app b·∫°n mu·ªën, b·∫•m c√†i ƒë·∫∑t v√† ƒë·ªÉ m√¨nh lo ph·∫ßn c√≤n l·∫°i nh√©!")
        desc.setFont(QFont("Segoe UI", 13))
        desc.setAlignment(Qt.AlignmentFlag.AlignCenter)
        desc.setStyleSheet(f"color: {COLOR_PRIMARY_DARK}; font-style: italic;")
        main_layout.addWidget(desc)

        # Scroll area ch·ª©a nh√≥m app
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet("border: none;")
        scroll_content = QWidget()
        scroll_layout = QVBoxLayout(scroll_content)
        scroll_layout.setSpacing(20)

        # T·∫°o nh√≥m ·ª©ng d·ª•ng
        for group_name, apps_dict in apps.items():
            groupbox = GroupBoxFancy(group_name)
            group_layout = QVBoxLayout()
            for app_name in apps_dict.keys():
                cb = HoverCheckBox(app_name)
                self.checkboxes[app_name] = cb
                group_layout.addWidget(cb)
            groupbox.setLayout(group_layout)
            scroll_layout.addWidget(groupbox)

        scroll_area.setWidget(scroll_content)
        main_layout.addWidget(scroll_area)

        # N√∫t ch·ª©c nƒÉng
        btn_layout = QHBoxLayout()
        btn_layout.setSpacing(30)

        btn_install = FancyButton("üöÄ C√ÄI ƒê·∫∂T NGAY")
        btn_install.clicked.connect(self.install_selected_apps)

        btn_exit = FancyButton("‚ùå THO√ÅT", color="#E63946")
        btn_exit.clicked.connect(self.close)

        btn_layout.addStretch()
        btn_layout.addWidget(btn_install)
        btn_layout.addWidget(btn_exit)
        btn_layout.addStretch()

        main_layout.addLayout(btn_layout)

        # Footer nh·∫π nh√†ng
        footer = QLabel("By Cherry üêæ | Ph√°t tri·ªÉn v·ªõi ‚ù§Ô∏è v√† th∆° ca")
        footer.setFont(QFont("Segoe UI", 10))
        footer.setAlignment(Qt.AlignmentFlag.AlignCenter)
        footer.setStyleSheet(f"color: {COLOR_PRIMARY_DARK}; margin-top: 15px;")
        main_layout.addWidget(footer)

        self.setLayout(main_layout)

    def install_selected_apps(self):
        selected_apps = [app for app, cb in self.checkboxes.items() if cb.isChecked()]
        if not selected_apps:
            QMessageBox.warning(self, "‚ö†Ô∏è C·∫£nh b√°o", "B·∫°n ch∆∞a ch·ªçn app n√†o ƒë·ªÉ c√†i c·∫£! üê±‚Äçüë§")
            return

        reply = QMessageBox.question(
            self, "X√°c nh·∫≠n c√†i ƒë·∫∑t",
            f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën c√†i c√°c app n√†y kh√¥ng?\n\n" + "\n".join(selected_apps),
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if reply != QMessageBox.StandardButton.Yes:
            return

        errors = []
        for app in selected_apps:
            command = self.lookup_command(app)
            if not command:
                errors.append(f"Kh√¥ng t√¨m th·∫•y l·ªánh cho {app}")
                continue

            try:
                cmds = [cmd.strip() for cmd in command.split("&&")]
                for cmd in cmds:
                    subprocess.run(cmd, shell=True, check=True)
            except subprocess.CalledProcessError as e:
                errors.append(f"L·ªói khi c√†i {app}: {e}")

        if errors:
            QMessageBox.critical(self, "‚ùå L·ªói", "\n".join(errors))
        else:
            QMessageBox.information(self, "‚úÖ Ho√†n th√†nh", "ƒê√£ c√†i xong t·∫•t c·∫£ app b·∫°n ch·ªçn! ü•≥")

    def lookup_command(self, app_name):
        for group in apps.values():
            if app_name in group:
                return group[app_name]
        return None


def main():
    app = QApplication(sys.argv)
    gui = InstallerGUI()
    gui.show()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()
